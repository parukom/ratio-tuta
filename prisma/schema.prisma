generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Use an unpooled, direct connection for schema migrations
  // Set DIRECT_URL in your environment (see .env.example)
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  role             UserRole  @default(USER)
  emailVerified    Boolean   @default(false)
  // When set, any sessions issued at or before this timestamp are invalid
  sessionRevokedAt DateTime?
  createdAt        DateTime  @default(now())
  Receipt          Receipt[]

  teams            TeamMember[]
  ownedTeams       Team[]        @relation("OwnedTeams")
  // Places this user is explicitly registered to work at
  placeMemberships PlaceMember[]

  // Back-reference: audit logs where this user is the actor
  auditLogsAsActor AuditLog[] @relation("AuditActorUser")

  // Email verification tokens
  emailVerificationTokens EmailVerificationToken[]
}

model Team {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  ownerId String
  owner   User   @relation("OwnedTeams", fields: [ownerId], references: [id])

  members        TeamMember[]
  places         Place[]
  itemCategories ItemCategory[]
  placeTypes     PlaceType[]
  items          Item[]
  itemTypes      ItemType[]

  // Back-reference: audit logs associated with this team
  auditLogsForTeam AuditLog[] @relation("AuditTeam")
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@unique([userId])
}

// A physical or virtual venue to register sales (food trucks, kiosks, parks, events, etc.)
model Place {
  id            String     @id @default(uuid())
  teamId        String
  name          String
  placeTypeId   String?
  placeType     PlaceType? @relation(fields: [placeTypeId], references: [id])
  description   String?
  address1      String?
  address2      String?
  city          String?
  country       String?
  timezone      String?
  currency      String?    @default("EUR")
  totalEarnings Float      @default(0)
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  team       Team          @relation(fields: [teamId], references: [id])
  placeItems PlaceItem[]
  Receipt    Receipt[]
  // Users explicitly assigned to this place
  members    PlaceMember[]

  @@unique([teamId, name]) // unique place name per team
  @@index([teamId])
  @@index([placeTypeId])
}

// A sellable item scoped to a Team (team-wide catalog / storage)
model Item {
  id         String  @id @default(uuid())
  teamId     String
  name       String
  sku        String?
  price      Float
  taxRateBps Int     @default(0) // basis points (e.g. 2100 = 21.00%)
  isActive   Boolean @default(true)

  stockQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  description String?
  color       String?
  size        String?
  brand       String?
  tags        String[] // paprastas string array, tinka filtravimui
  // Optional flexible attributes driven by ItemType definition
  attributes  Json?

  categoryId String?
  category   ItemCategory? @relation(fields: [categoryId], references: [id])

  team            Team            @relation(fields: [teamId], references: [id])
  places          PlaceItem[]
  measurementType MeasurementType @default(PCS)
  // Optional reference to a Team-scoped ItemType which defines dynamic fields
  itemTypeId      String?
  itemType        ItemType?       @relation(fields: [itemTypeId], references: [id])

  @@unique([teamId, name]) // unique item name within a team
  @@unique([teamId, sku])
  @@index([teamId])
  @@index([categoryId])
  @@index([itemTypeId])
}

// Team-scoped type for Items (user-defined). teamId null means global / shared.
model ItemCategory {
  id        String   @id @default(uuid())
  teamId    String?
  name      String
  slug      String
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team  Team?  @relation(fields: [teamId], references: [id])
  items Item[]

  @@unique([teamId, name])
  @@unique([teamId, slug])
  @@index([teamId])
}

// Items assigned to a Place with a quantity in stock
model PlaceItem {
  id        String   @id @default(uuid())
  placeId   String
  itemId    String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place @relation(fields: [placeId], references: [id])
  item  Item  @relation(fields: [itemId], references: [id])

  @@unique([placeId, itemId])
  @@index([placeId])
  @@index([itemId])
}

// Team-scoped type for Places (user-defined). teamId null means global / shared.
model PlaceType {
  id        String   @id @default(uuid())
  teamId    String?
  name      String
  slug      String
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team      Team?      @relation(fields: [teamId], references: [id])
  places    Place[]
  itemTypes ItemType[]

  @@unique([teamId, name])
  @@unique([teamId, slug])
  @@index([teamId])
}

// Team-scoped Item type definitions to allow dynamic item attributes.
// Optionally associated with a PlaceType to help filter by venue kind.
model ItemType {
  id          String     @id @default(uuid())
  teamId      String
  name        String
  slug        String
  description String?
  isActive    Boolean    @default(true)
  // Optional: limit this type to places of a given place type
  placeTypeId String?
  placeType   PlaceType? @relation(fields: [placeTypeId], references: [id])
  // JSON array of field definitions for this type
  // Example: [{ key: "weight", label: "Weight", type: "number", unit: "kg", required: false }]
  fields      Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  team  Team   @relation(fields: [teamId], references: [id])
  items Item[]

  @@unique([teamId, slug])
  @@index([teamId])
  @@index([placeTypeId])
}

// Explicit membership of a User to a Place (within a Team)
model PlaceMember {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())

  place Place @relation(fields: [placeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
  @@index([userId])
}

// Audit log for backend actions
model AuditLog {
  id        String      @id @default(uuid())
  timestamp DateTime    @default(now())
  action    String
  status    AuditStatus
  message   String?

  actorUserId String?
  actorUser   User?   @relation(name: "AuditActorUser", fields: [actorUserId], references: [id])

  teamId String?
  team   Team?   @relation(name: "AuditTeam", fields: [teamId], references: [id])

  targetTable String?
  targetId    Int?
  ip          String?
  userAgent   String?
  metadata    Json?

  @@index([action, timestamp])
  @@index([actorUserId, timestamp])
  @@index([teamId, timestamp])
}

model Receipt {
  id            String        @id @default(uuid())
  userId        String?
  placeId       String?
  totalPrice    Float
  amountGiven   Float
  change        Float
  timestamp     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentOption PaymenOption  @default(CASH)
  status        ReceiptStatus @default(COMPLETED)
  place         Place?        @relation(fields: [placeId], references: [id])
  user          User?         @relation(fields: [userId], references: [id])
  items         ReceiptItem[]
}

model ReceiptItem {
  id        String  @id @default(uuid())
  receiptId String
  itemId    String
  title     String
  price     Float
  quantity  Int
  receipt   Receipt @relation(fields: [receiptId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum TeamRole {
  OWNER
  MEMBER
  ADMIN
}

enum UserRole {
  USER
  ADMIN
}

enum AuditStatus {
  SUCCESS
  ERROR
  DENIED
}

enum PaymenOption {
  CASH
  CARD
  REFUND
}

enum ReceiptStatus {
  COMPLETED
  REFUNDED
  CANCELLED
}

enum MeasurementType {
  PCS // vienetai
  WEIGHT // kg, g
  LENGTH // m, cm
  VOLUME // l, ml
  AREA // m2
  TIME // valandos, minutÄ—s
}
