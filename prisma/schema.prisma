generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                   @id @default(uuid())
  name             String
  // Privacy-preserving email storage
  // emailHmac is a deterministic HMAC of the normalized email used for lookups and uniqueness
  emailHmac        String    @unique
  // emailEnc is the AES-GCM encrypted normalized email for display and mailing
  emailEnc         String
  password         String
  role             UserRole  @default(USER)
  emailVerified    Boolean   @default(false)
  // When set, any sessions issued at or before this timestamp are invalid
  sessionRevokedAt DateTime?
  // Avatar stored in S3
  avatarUrl        String?
  avatarKey        String?
  // User preferences
  showHelp         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  Receipt          Receipt[]

  teams            TeamMember[]
  ownedTeams       Team[]        @relation("OwnedTeams")
  // Places this user is explicitly registered to work at
  placeMemberships PlaceMember[]

  // Back-reference: audit logs where this user is the actor
  auditLogsAsActor AuditLog[] @relation("AuditActorUser")

  // Email verification tokens
  emailVerificationTokens EmailVerificationToken[]
  // Password reset tokens
  passwordResetTokens     PasswordResetToken[]
}

model Team {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  ownerId          String
  auditLogsForTeam AuditLog[]         @relation("AuditTeam")
  items            Item[]
  itemCategories   ItemCategory[]
  places           Place[]
  placeTypes       PlaceType[]
  owner            User               @relation("OwnedTeams", fields: [ownerId], references: [id])
  members          TeamMember[]
  subscriptions    TeamSubscription[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String   @unique
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model Place {
  id            String        @id @default(uuid())
  teamId        String
  name          String
  placeTypeId   String?
  description   String?
  address1      String?
  address2      String?
  city          String?
  country       String?
  timezone      String?
  currency      String?       @default("EUR")
  totalEarnings Float         @default(0)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  placeType     PlaceType?    @relation(fields: [placeTypeId], references: [id])
  team          Team          @relation(fields: [teamId], references: [id])
  placeItems    PlaceItem[]
  members       PlaceMember[]
  Receipt       Receipt[]

  @@unique([teamId, name])
  @@index([teamId])
  @@index([placeTypeId])
}

model Item {
  id              String          @id @default(uuid())
  teamId          String
  name            String
  sku             String?
  price           Float
  pricePaid       Float           @default(0)
  taxRateBps      Int             @default(0)
  isActive        Boolean         @default(true)
  stockQuantity   Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  description     String?
  color           String?
  size            String?
  brand           String?
  tags            String[]
  imageUrl        String?
  imageKey        String?
  categoryId      String?
  measurementType MeasurementType @default(PCS)
  category        ItemCategory?   @relation(fields: [categoryId], references: [id])
  team            Team            @relation(fields: [teamId], references: [id])
  places          PlaceItem[]

  @@unique([teamId, name])
  @@unique([teamId, sku])
  @@index([teamId])
  @@index([categoryId])
}

model ItemCategory {
  id        String   @id @default(uuid())
  teamId    String?
  name      String
  slug      String
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
  team      Team?    @relation(fields: [teamId], references: [id])

  @@unique([teamId, name])
  @@unique([teamId, slug])
  @@index([teamId])
}

model PlaceItem {
  id        String   @id @default(uuid())
  placeId   String
  itemId    String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id])
  place     Place    @relation(fields: [placeId], references: [id])

  @@unique([placeId, itemId])
  @@index([placeId])
  @@index([itemId])
}

model PlaceType {
  id        String   @id @default(uuid())
  teamId    String?
  name      String
  slug      String
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  places    Place[]
  team      Team?    @relation(fields: [teamId], references: [id])

  @@unique([teamId, name])
  @@unique([teamId, slug])
  @@index([teamId])
}

model PlaceMember {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
  @@index([userId])
}

model AuditLog {
  id          String      @id @default(uuid())
  timestamp   DateTime    @default(now())
  action      String
  status      AuditStatus
  message     String?
  actorUserId String?
  teamId      String?
  targetTable String?
  targetId    Int?
  ip          String?
  userAgent   String?
  metadata    Json?
  actorUser   User?       @relation("AuditActorUser", fields: [actorUserId], references: [id])
  team        Team?       @relation("AuditTeam", fields: [teamId], references: [id])

  @@index([action, timestamp])
  @@index([actorUserId, timestamp])
  @@index([teamId, timestamp])
}

model Receipt {
  id            String        @id @default(uuid())
  userId        String?
  placeId       String?
  totalPrice    Float
  amountGiven   Float
  change        Float
  timestamp     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentOption PaymenOption  @default(CASH)
  status        ReceiptStatus @default(COMPLETED)
  place         Place?        @relation(fields: [placeId], references: [id])
  user          User?         @relation(fields: [userId], references: [id])
  items         ReceiptItem[]
}

model ReceiptItem {
  id              String          @id @default(uuid())
  receiptId       String
  itemId          String
  title           String
  price           Float
  quantity        Int
  measurementType MeasurementType @default(PCS)
  receipt         Receipt         @relation(fields: [receiptId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Package {
  id                   String             @id @default(uuid())
  slug                 String             @unique
  name                 String
  description          String?
  monthlyCents         Int                @default(0)
  annualCents          Int                @default(0)
  stripeProductId      String?            @unique
  stripeMonthlyPriceId String?
  stripeAnnualPriceId  String?
  features             String[]           @default([])
  metadata             Json?
  isActive             Boolean            @default(true)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  teamSubscriptions    TeamSubscription[]
}

model TeamSubscription {
  id                      String    @id @default(uuid())
  teamId                  String
  packageId               String
  isActive                Boolean   @default(true)
  isAnnual                Boolean   @default(false)
  priceCents              Int
  stripeSubscriptionId    String?   @unique
  stripeCustomerId        String?
  stripeCheckoutSessionId String?   @unique
  stripePriceId           String?
  seats                   Int?
  extraStorageCents       Int?
  metadata                Json?
  startedAt               DateTime  @default(now())
  expiresAt               DateTime?
  cancelAt                DateTime?
  canceledAt              DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  package                 Package   @relation(fields: [packageId], references: [id])
  team                    Team      @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([packageId])
  @@index([stripeCustomerId])
}

enum TeamRole {
  OWNER
  MEMBER
  ADMIN
}

enum UserRole {
  USER
  ADMIN
}

enum AuditStatus {
  SUCCESS
  ERROR
  DENIED
}

enum PaymenOption {
  CASH
  CARD
  REFUND
}

enum ReceiptStatus {
  COMPLETED
  REFUNDED
  CANCELLED
}

enum MeasurementType {
  PCS
  WEIGHT
  LENGTH
  VOLUME
  AREA
}
